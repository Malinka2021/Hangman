# 1
# Importing required module:
# Random module allows randomly select a word from pre-defined lists.

import random

#2
# Pre-defined word collection
# Word selection: The game uses a dictionary with levels where each level has a list of words.

word_list = {
    'easy': ['cat', 'dog', 'fish', 'bat'],
    'medium': ['lion', 'tiger', 'giraffe', 'elephant'],
    'hard': ['crocodile', 'hippopotamus', 'rhinoceros', 'kangaroo']
}

# 3
# ASCII art for Hangman
# This list contains ASCII representations for different stages of the game.

hangman_stages = [
    '''  
        -----
        |   |
        |
        |
        |
        |
    ''',
    '''  
        -----
        |   |
        |   O
        |
        |
        |
    ''',
    '''  
        -----
        |   |
        |   O
        |  /
        |
        |
    ''',
    '''  
        -----
        |   |
        |   O
        |  /|
        |
        |
    ''',
    '''  
        -----
        |   |
        |   O
        |  /|
        |  /
        |
    ''',
    '''  
        -----
        |   |
        |   O
        |  /|\\
        |  / \\
        |
    '''
]

# 4
# Choosing a word: 
# The function takes a difficulty level as an argument and returns a random word from the corresponding list.

def choose_word(level):
    return random.choice(word_list[level])

# 5
# Display the current state of the word based on the letters guessed.
# List comprehension is used to create a lit of characters (guessed letter => letter, other => _)
# Returns a string that joins these characters with spaces.

def display_state(word, guessed_letters):
    return ' '.join([letter if letter in guessed_letters else '_' for letter in word])

# 6
# Getting user input ensuring it's valid.
# The loop continues until the used provides a valid guess.
# The input is stripped from whitespace and converted to lowercase.
# If the user types 'quit', the game exits.
# It checks that the input is a single (len(guess))letter (guess.isalpha()) and not an already guessed letter.
# If everything OK, the guessed letter is returned.

def get_user_input(guessed_letters):
    while True:
        guess = input("Guess a letter (or type 'quit' to exit): ").strip().lower()
        if guess == 'quit':
            print("Goodbye!")
            exit()
        if len(guess) != 1 or not guess.isalpha():
            print("Please enter a single letter.")
        elif guess in guessed_letters:
            print("You've already guessed that letter.")
        else:
            return guess

# 7
# Main game function starts the game. 
# Prompts the user to select a difficulty level and checks if the input is valid.
# If not valid, it prints an error mess and exits the function.

def main():
    print("Welcome to Hangman!")
    level = input("Choose a difficulty level (easy, medium, hard): ").strip().lower()
    if level not in word_list:
        print("Invalid level. Please choose 'easy', 'medium', or 'hard'.")
        return

# 8
# Game Initialization
# Selects a random word based on the chosed difficulty.
# Sets up a set to keep track of guessed letters (using a set to avoid duplicates).
# Initializes lives to 5.

    word = choose_word(level)
    guessed_letters = set()
    lives = 5  

# 9
# Game Loop
# The loop continues until the player runs out of lives.
# Inside the loop it displays the current hangman stage based on the lives remaining;
# the current state of the word (guessed letters revealed); the number of lives left.

    while lives > 0:
        
        print(hangman_stages[5 - lives])  
        print(display_state(word, guessed_letters))
        print(f"Lives left: {lives}")

# 10
# User Guess Handling
# Collects the user's guess using the get_user_input(guessed_letters) function 
# and adds it to the set of guessed letters.
# Checks if the guessed letter is in the word (case-sensitive), if it is, congratulated the user;
# otherwise decrements the lives and informs about incorrect guess.

        guess = get_user_input(guessed_letters)
        guessed_letters.add(guess)

        if guess in word.lower():
            print(f"Good guess! '{guess}' is in the word.")
        else:
            lives -= 1
            print(f"Sorry, '{guess}' is not in the word.")

# 11
# Check for win condition
# After each guess, checks if the player has gueesed all the letters.
# If the player has won, congratulates and exits the function.

        if all(letter in guessed_letters for letter in word.lower()):
            print(f"Congratulations! You've guessed the word: {word}.")
            return

# 12
# If the player runs out of lives, displays final hangman state 
# and informs about the correct word.

    print(hangman_stages[5]) 
    print(f"Game over! The word was: {word}.")

# 13
# Entry point
# Checks if the script is being run directly (not imported as a module).
# If it is, the main() function is called to start the game.

if __name__ == "__main__":
    main()
